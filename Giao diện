# L·∫•y class_labels t·ª´ th∆∞ m·ª•c (t√™n folder ch√≠nh l√† nh√£n)
class_labels = labels

# Load model ƒë√£ train
MODEL = load_model("/content/drive/MyDrive/banknote_cnn.h5")

def predict_image(image):
    if image is None:
        return "Ch∆∞a c√≥ ·∫£nh", None

    # Resize v√† chu·∫©n h√≥a
    img = image.resize((img_size, img_size))
    arr = img_to_array(img).astype("float32") / 255.0
    arr = np.expand_dims(arr, axis=0)

    preds = MODEL.predict(arr)[0]  # shape (num_classes,)
    top_idx = preds.argsort()[::-1][:3]  # l·∫•y top-3
    result_text = "Top 3 d·ª± ƒëo√°n:\n"
    for i in top_idx:
        result_text += f"- {class_labels[i]}: {preds[i]*100:.2f}%\n"

    prob_dict = {class_labels[i]: float(preds[i]) for i in range(len(class_labels))}

    return result_text, prob_dict

with gr.Blocks() as demo:
    gr.Markdown("# üíµ Nh·∫≠n di·ªán ti·ªÅn Vi·ªát Nam b·∫±ng CNN")
    gr.Markdown("Upload ·∫£nh t·ªù ti·ªÅn (m·∫∑t tr∆∞·ªõc ho·∫∑c sau).")

    inp = gr.Image(type="pil", label="Upload ·∫£nh")
    out_text = gr.Textbox(label="K·∫øt qu·∫£ d·ª± ƒëo√°n")
    out_plot = gr.Label(num_top_classes=len(class_labels), label="X√°c su·∫•t c√°c l·ªõp")


    btn = gr.Button("Predict")
    btn.click(predict_image, inputs=inp, outputs=[out_text, out_plot])

demo.launch(share=True)  # n·∫øu ch·ªâ test local th√¨ ƒë·ªÉ share=False
